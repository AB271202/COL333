#pragma once

#include "engine_base.hpp"
#include <atomic>
#include <utility>
#include <vector>
// #include <unordered_map>



class Engine : public AbstractEngine
{

    // add extra items here.
    // Note that your engine will always be instantiated with the default
    // constructor.

public:

    std::unordered_map<std::string, std::string> openingdb_73_w={
        {"[(4,1), (4,0), (3,1), (3,0), (2,1), (2,0), (2,5), (2,6), (3,5), (3,6), (4,5), (4,6), ]", "c2b3"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (2,5), (2,6), (3,5), (3,6), (5,5), (4,6), ]", "e2f2"},
        };
    std::unordered_map<std::string, std::string> openingdb_73_b={
        {"[(5,1), (4,0), (3,1), (3,0), (2,1), (2,0), (2,5), (2,6), (3,5), (3,6), (4,5), (4,6), ]","c6b6"},
        {"[(4,1), (5,0), (3,1), (3,0), (2,1), (2,0), (2,5), (2,6), (3,5), (3,6), (4,5), (4,6), ]","e6f6"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,0), (2,0), (2,5), (2,6), (3,5), (3,6), (4,5), (4,6), ]","c6b6"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,1), (2,0), (2,5), (2,6), (3,5), (3,6), (4,5), (4,6), ]","c6b6"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (2,5), (2,6), (3,5), (3,6), (4,5), (4,6), ]","e6f5"},
        {"[(4,1), (4,0), (3,1), (3,0), (2,1), (1,0), (2,5), (2,6), (3,5), (3,6), (4,5), (4,6), ]","e6f5"},
        {"[(4,1), (4,0), (3,1), (3,0), (2,1), (1,1), (2,5), (2,6), (3,5), (3,6), (4,5), (4,6), ]","e6f5"},
        };
    std::unordered_map<std::string, std::string> openingdb_84_w={
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,7), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,7), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,7), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,7), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,7), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,6), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,6), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,6), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,6), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,6), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,6), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,6), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,6), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,6), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,6), (5,7), ]","b3b4"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,5), (5,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,5), (5,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,5), (5,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,5), (5,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (6,5), (5,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,7), ]","d2c2"},
        {"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (6,7), ]","d2c2"},
        };
std::unordered_map<std::string, std::string> openingdb_84_b={
{"[(4,1), (4,0), (3,1), (3,0), (1,0), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (5,7), ]","f7g8"},
{"[(4,1), (4,0), (3,1), (3,0), (2,1), (1,1), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (5,7), ]","f7g8"},
{"[(4,1), (4,0), (3,1), (3,0), (1,1), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (5,7), ]","f7g8"},
{"[(4,1), (4,0), (3,1), (3,0), (1,2), (2,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (5,7), ]","f7g8"},
{"[(4,1), (4,0), (3,1), (3,0), (2,1), (1,0), (5,1), (5,0), (3,6), (3,7), (4,6), (4,7), (2,6), (2,7), (5,6), (5,7), ]","f7g8"},
};
    std::unordered_map<std::string, std::string> openingdb_82_b={
        {"[(6,1), (5,0), (4,1), (4,2), (3,1), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7g6"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (3,2), (2,1), (1,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (6,0), (4,1), (4,2), (3,1), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7g6"},
{"[(5,1), (4,0), (4,1), (4,2), (3,1), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","c7b7"},
{"[(5,1), (3,0), (4,1), (4,2), (3,1), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7g6"},
{"[(5,1), (5,0), (4,0), (4,2), (3,1), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (5,3), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (3,0), (4,2), (3,1), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (3,2), (1,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (1,2), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","f8g7"},
{"[(5,1), (5,0), (4,1), (5,3), (3,1), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7g6"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (1,1), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (3,2), (2,1), (2,0), (2,3), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (1,0), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","f8g7"},
{"[(5,1), (5,0), (4,1), (4,2), (2,3), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","d7e8"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (1,3), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (4,0), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (3,2), (2,1), (1,1), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (3,2), (1,0), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (3,2), (1,2), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (2,4), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","d6c5"},
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (3,2), (2,1), (2,0), (1,3), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","e7f5"}
    };
std::unordered_map<std::string, std::string> openingdb_82_w={
{"[(5,1), (5,0), (4,1), (4,2), (3,1), (3,2), (2,1), (2,0), (2,2), (5,2), (2,6), (2,7), (3,6), (3,5), (4,6), (4,5), (5,6), (5,7), (2,5), (5,5), ]","d2c4"}
};


    void find_best_move(const Board &b) override;
};
